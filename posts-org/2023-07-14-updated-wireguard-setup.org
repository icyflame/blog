#+OPTIONS: author:nil toc:nil ^:nil

#+begin_export html
---
layout: post
comments: true
title: New Wireguard Peer in 10 Minutes
categories: wireguard vpn technology
---
#+end_export

I have been using Wireguard[fn:1] for the past 4 years now. I started with the basic Wireguard
setup, where I did everything manually and used the =ip link= and =ip addr= commands to create new
links and assign addresses to them. When Wireguard's author open sourced the =wg-quick= utility
which had built-in SystemD unit support, I switched to using the configuration file formats that
=wg-quick= requires immediately. Complete with my own DNS server, which has a locally running
upstream DNS server, I was able to use this setup for a long time without having to change anything
at all. The excellent client support on Linux and (even) iOS ensured that I never really noticed
whether I had my VPN enabled. I kept it enabled at all times except when I needed to access some
geofenced service, like a radio application, which is available only in a given location. Recently,
I wrote a Golang application which will generate =wg-quick= compatible configurations for Wireguard
peers based on a simple JSON input file. This enabled me to create a new Wireguard peer and add it
to my network in less than 10 minutes the other day, and it was so easy that I *have* to write about
it.

#+begin_export html
<!--more-->
#+end_export

Wireguard is *very* simple. Literally and conceptually. Literally, it is less than 4000 lines of
code. The [[https://lkml.org/lkml/2019/11/27/266][original patch]] that added the VPN to the Linux kernel is very small and I have always
wanted to read it, although I have never been able to because knowledge about the Linux kernel
networking stack is a prerequisite. Conceptually, it is simple enough that it can be explained with
a single slide. To understand this concept, a rudimentary understanding of Linux syscalls is
sufficient.

[[file:~/code/blog/public/img/wireguard-concept-slide.png]]

*Source:* [[https://www.wireguard.com/presentations/#october-21-2016-codeblue-tokyo-japan][Wireguard Presentation - October 21, 2016 - Codeblue, Tokyo, Japan]]

Given all of this simplicity, the wg-quick configuration to establish a traditional VPN is also
very simple: It is about 10 lines of code that needs to be on every machine that is part of the VPN,
and the main difference among the configurations is only whether it is on the server (the peer which
will forward all the traffic towards the Internet) or the client (the set of peers which will send
traffic to the server asking it to forward it to the Internet). The configuration is so small that
no tool is distributed to generate it. And I agreed with that for a while.

I have 2 main devices: my computer and my phone. And I was able to connect them to 2 VPN servers
with a total of 6 configuration files. The key pairs for each pair among the 3 servers for 2
different networks was different; so when I was originally setting this up, I made some mistakes
while copy-pasting the keys and it took me a couple tries to get the setup right. Once I got the
setup right, I did not bother to change it for 2 years. But after that, I had some new requirements
which this manual setup did not meet: I wanted to add new clients and new servers quickly, because I
expected the number of clients to grow and I did not want to manage the keys manually. As each peer
had a single private key inside each network, and the public key could be derived from the private
key, this only meant that I needed some sort of persistent map between 2 keys: network and client
name and 1 string value: the Wireguard private key. If you are familiar in any programming language,
you should be able to build a system which reads and writes these keys from a JSON or YAML file
fairly easily.

Being a simple file, there is no need to introduce a new tool to manage it. If your hard drive is
already encrypted, you can just keep it as-is on disk and as long as you are able to boot your
computer, the file will always be available. If you want to keep the file on some sort of cloud
storage but encrypt it end-to-end, then you could easily use [[https://dyne.org/software/tomb/][GNU Tomb]] to create an image file which
is internally a LUKS-container with an ext4 filesystem. And you could upload this image file to
Dropbox or Google Drive. Most cloud storage systems have good integration with the Gnome Files or
Nautilus application in Ubuntu, so syncing the files is not manual.

I had an idea of what I wanted to do, but I did not get around to doing it until the previous month
when I realized that one of my new devices did not have a VPN setup and I had been avoiding any use
of the device that required a VPN (such as browsing the Internet while also keeping my real IP
address hidden, or accessing streaming services which are geofenced and only available in countries
other than where I live.) This was suboptimal and I did not want this pattern to continue, if I
could help it. I wanted to be able to introduce new clients and servers easily and without having to
think too much, so I got around to writing a single-file Go program which would use a JSON file as
input and generate configuration files on demand.

* Footnotes

[fn:1] Link first post about Wireguard
