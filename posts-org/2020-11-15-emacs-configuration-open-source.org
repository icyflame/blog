My first commit to [[https://github.com/icyflame/.emacs.d][icyflame/.emacs.d]], the repository with my Emacs configuration, was in April this
year (7 months ago). Now, I have reached a point at which I have cleaned up my configuration enough
to feel okay about making it open source. In this post and the two posts after this one, I will go
over some of the most important steps in my configuration's evolution from scratch to it's current
form.

* Context

I started my configuration from scratch with a vanilla Emacs installation. This is a personal
preference; there are several configurations out there which allow people to start from a
opinionated configuration which they can understand and tweak to their needs. (There are even Emacs
distributions like [[https://github.com/bbatsov/prelude][Prelude]] which have a lot of the plugins which I configured manually already
installed!)

This post is not really meant as a guide for the reader to get started with Emacs or copy my
configuration and use it as is; that is not my goal anyway. My main goal here is to talk about the
things in my configuration which feel obvious to me now, but were particularly difficult to figure
out when I initially tried to figure it out. Along the way, I will also try to share some of the fun
things I discovered about Emacs Lisp, a language that is equal parts fascinating and obscure.

That said, if you plan to use parts of my configuration and are unable to figure out why something
is not working, I would love to hear your questions and help with figuring out the reason!

* Act 1: Fundamentals

Right after installing Emacs, I wanted to figure out a stable method to install new packages from
using Emacs' package management system. I wanted to ensure that this would be done using
configuration, and not using ad-hoc commands. My motive for this requirement was mainly the ease of
migrating this configuration between my personal and my work computer (I started using Emacs on my
personal Linux machine at home; I use a Macbook Pro at work (from home)). For the 2 months between
February and April, I was using Emacs everyday without any major changes to the base empty
configuration that every installation comes with. This was not a very good experience, and I kept
switching back to Vim whenever I had to do anything that was slightly more complicated than typing
text.

** Package Management

I got the ~require-package~ function from [[https://github.com/purcell/emacs.d/blob/754a3ce1871f44c0c235887c18a32ac5dc799eb7/lisp/init-elpa.el#L29-L43][purcell/emacs.d]]. Back then, I didn't fully understand what
this function was doing. But the promise of this function was that it would provide a portable way
to install packages from Emacs' package registry, [[https://melpa.org/#/][Melpa]].

#+BEGIN_SRC elisp
  ;;; from purcell/emacs.d
  (defun require-package (package &optional min-version no-refresh)
	"Install given PACKAGE, optionally requiring MIN-VERSION.
  If NO-REFRESH is non-nil, the available package lists will not be
  re-downloaded in order to locate PACKAGE."
	(if (package-installed-p package min-version)
		t
	  (if (or (assoc package package-archive-contents) no-refresh)
		  (package-install package)
		(progn
		  (package-refresh-contents)
		  (require-package package min-version t)))))
#+END_SRC

** Evil mode and general.el

[[https://github.com/icyflame/.emacs.d/commit/4d083a63][4d083a63]]

#+BEGIN_SRC elisp
  ;; 12. Install general package
  (require-package 'general)

  ;; 13. Add key mappings for common actions using general
  (general-evil-setup)
  (general-nmap
	"DEL" 'evil-ex-nohighlight)
#+END_SRC

After figuring how to install packages, the first package I installed was ~evil~. This package
brings in most of Vim's keybindings. Installing this package right at the beginning is a
double-edged knife, as it simultaneously makes Emacs more familiar _and_ contributes to making
configuring Emacs harder to figure out. Evil's configuration options are, _for the most part_,
exactly the same as Vim. But the parts that are different are hard to understand and I was flummoxed
by these differences for about 2 months. During this period, [[https://github.com/noctuid/evil-guide][noctuid/evil-guide]] was my main
reference. The Readme of this repository is comprehensive and explains everything about Evil mode. I
read this Readme several times to figure out exactly what was different, and how I could get rid of
these differences completely.

general.el was a harder choice because I was not quite sure what this package did, but it was highly
rated and everyone seemed to be using it. evil-guide talked about this package with high regard, and
claimed that it would make configuring Evil mode easier. So, I took a leap of faith and decided to
install it.

** Don't install Helm

Installing [[https://github.com/emacs-helm/helm][Helm]] early on was a mistake. [[https://github.com/emacs-helm/helm][Helm]] is an extremely powerful package, that is very hard to
use and understand. It is often referred to as a replacement for ~Ctrl-P~, but in reality, it has a
lot more bells and whistles. These extra features make it very hard to understand where Helm ends
and where Emacs begins. Using Helm within an editor whose keybindings you are not yet familiar with
is hard. Personally, I think this was a big mistake and delayed my configuration efforts by about
the 2 weeks that it took me to realize what was going on and uninstall Helm.

** Org mode

[[https://github.com/icyflame/.emacs.d/commit/22187304][22187304]]

#+BEGIN_SRC elisp
  ;; 18. Org mode settings
  ;;; Set the done time for a TODO item when moving it to DONE
  (setq org-log-done 'time)

  (setq org-todo-keywords
		'((sequence "TODO(t)" "WAITING(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
#+END_SRC

I started using Org mode around April 28 when I made a commit to introduce the TODO states that I
wanted to have in my Org file. This was right after watching the [[https://www.youtube.com/watch?v=oJTwQvgfgMM][original talk about Org-mode]]. I am
glad that I started using this early on as I was able to understand a lot more about how Emacs works
as an editor (For e.g.: keybinding maps per mode, the global mode, minor modes, mode hooks) by
configuring Org-mode, a non-programming mode whose configuration is much easier to understand.

* Act 2: Keybindings and Package Integration

After figuring out how to install packages, as you start to use the editor more, you run into cases
where the keybindings are inconvenient or don't exist at all. During this phase, the 3 months
between June and August, I added a lot of keybindings. Most of them were to mimic the functionality
that I had configured with Vim over some time. A lot of them were new keybindings which made sense
only in the Emacs world.

At this point, I was using Emacs everyday for non-code related editing. Towards the end of this
period, I installed some major modes which allowed me to program in Go within Emacs, but my first
attempt at the installation of these modes was terrible and I had a very bad experience. After
giving up for a short period of time, I returned to the problem once again and figured it out the
second time around. This story is longer and I want to keep it for another blog post.

** Navigation using ~Ctrl + H/J/K/L~

[[https://github.com/icyflame/.emacs.d/commit/c458cc48][c458cc48]]

#+BEGIN_SRC elisp
  (general-nmap
	"DEL" 'evil-ex-nohighlight
	"C-h" 'evil-window-left
	"C-j" 'evil-window-down
	"C-k" 'evil-window-up
	"C-l" 'evil-window-right
	)
#+END_SRC


Navigation between various splits using ~Ctrl~ and the Home row keys was another one of the base
requirements for me when I started using this editor. After installing ~general.el~ and reading
evil-guide 10-20 times, I was able to figure out how to add the appropriate bindings for moving
around splits using general.

The most confusing part of this were the quotation marks. Emacs allows functions to be specified
with ~#'~ or with a simple single quote. There does not seem to be any difference and you can use
either of those forms.

** Keybindings to comment code

[[https://github.com/icyflame/.emacs.d/commit/99683e0f][99683e0f]]

#+BEGIN_SRC elisp
  ;; 24. Keybindings that use the leader key functionality in normal and visual mode
  (general-create-definer leader-def-visual-mode
	:states '(visual)
	:prefix ","
	)
  (leader-def-visual-mode "c SPC" 'comment-or-uncomment-region)

  (general-create-definer leader-def-normal-mode
	:states '(normal)
	:prefix ","
	)
  (leader-def-normal-mode "c SPC" 'comment-line)
#+END_SRC

This was the first section of the configuration which was more than just using a built-in function
directly. I was starting to understand what these functions were doing and I was able to get the
leader key behavior that I have always liked for commenting and un-commenting code in Vim. The
~comment-or-uncomment-region~ function is a Emacs-only feature which inherently understands the
comment pattern for the language that is being edited.

** Hooks

[[https://github.com/icyflame/.emacs.d/commit/eae9cc91][eae9cc91]]

#+BEGIN_SRC elisp
  ;; 26. Remove trailing whitespace characters from all files
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Hooks are a major part of Emacs. Until now, I have found that they are the main pathway for
connecting modes with each other (e.g.: Run the spell-checking mode when the file type is Org). They
are also very useful for doing things like the above configuration block, which deletes trailing
white spaces from all file types before saving the file to disk.

** Mode maps for Keybindings

[[https://github.com/icyflame/.emacs.d/commit/71c9a782][71c9a782]]

#+BEGIN_SRC diff
  -  ;; TODO: This should be active only in the org mode key map
	 (ctrl-keybindings
  +	:keymaps '(org-mode-map)
	  "C-c l c" 'org-cycle-list-bullet
  +   "C-c e" 'org-table-edit-formulas
	  )

  +  ;; 23. SQL format highlighted region
  +  (general-evil-define-key 'visual sql-mode-map
  +	"gq" 'run-sqlbeautify
  +	)
#+END_SRC

This is another Emacs-only concept which was hard to understand for me when I tried to map it back
to the knowledge I had about editor configuration already. After a few months of getting used to
this, I am much more confident about adding new keybindings. For e.g., when I started testing
[[https://github.com/skeeto/elfeed][elfeed]] today, I added several keybindings within the first few hours of using it:

[[https://github.com/icyflame/.emacs.d/commit/1c672f7a][1c672f7a]]

#+BEGIN_SRC elisp
  ;; Elfeed Search's default mappings work are for Insert mode only
  (general-evil-define-key '(normal visual) elfeed-search-mode-map
	"RET" 'elfeed-search-show-entry
	"u" 'elfeed-search-tag-all-unread
	"r" 'elfeed-search-untag-all-unread)
#+END_SRC

This evolution from not understanding what a mode map means or does, to understanding and being able
to use it properly was satisfying for me. This process takes time, and if you are switching to
something new and are having trouble not understanding things that everyone else treats as _basic_,
I would tell you to simply stick with it for a few more months and see if you understand it better
then. ([[https://www.youtube.com/channel/UCmGSJVG3mCRXVOP4yZrU1Dw][Johnny Harris]] has [[https://www.youtube.com/watch?v=zKDe094o-Q8][a great video]] about how he figured out how to photograph far-away galaxies
that runs along the same lines.)

* Act 3: Writing Emacs Lisp Functions

Emacs Lisp is the language that used to configure Emacs. It is a functional programming language and
looks very similar to the prefix notation when you try to do simple arithmetic:

#+BEGIN_SRC elisp
  (/ 2000 (+ 34 4.5))
  51.94805194805195
#+END_SRC

** Delete all comments from a buffer

[[https://github.com/icyflame/.emacs.d/commit/e501bb0a][e501bb0a]]

My goal at this point was to write an Emacs function that would delete all the comments from a
file. This goal was a fairly simple one (I thought) because I was using a Regular expression in Vim
to do this: ~:g/^#/norm dd~. I used the ~#~ because I deleted all comments only from shell files
which were copies of the commands that I had run (My PS1 starts with a hash to ensure that when I
ran this command, personal information like my host name or the path will be stripped).

In late October, 6 months and 9 days after I made my initial commit, I was able to write a function
which actually deleted all comments from a buffer.

I faced some interesting challenges when I was writing this function. My original goal seemed
extremely simple: Delete a line if it is a comment; run this for the whole buffer. Thinking like an
editor, I decided to do this on a line-by-line basis.

One of the interesting challenges was figuring out when I was at the end of a buffer. Emacs does not
seem to have any function to get the last line. There are functions to get the last byte position,
but none to get the last line, that I was able to find. So, I had to manually keep track of whether
I was deleting a line. This lead to a function which would call another function and depending on
whether the line was deleted, subtract one from the original ~last-line-number~ value.

This process was full of other challenges that were related to my inability to find the name of the
function that I wanted to use quickly. Emacs functions are not all named using some common pattern,
which would make them easier to find. For e.g.:

- ~line-number-at-pos~ returns the line number at the current position
- ~(beginning-of-buffer)~ moves the cursor to the beginning of the buffer, ~(forward-line)~ moves
  one line ahead
- ~(kill-whole-line)~ deletes the current line.

As you can probably see, there's no common convention here. All functions that deal with lines
don't _start_ with ~line-~, they simply _have_ the ~line~ word in them!

** Copy the contents of the current buffer

The goal for my second function was to copy the contents of the current buffer to the system
clipboard. Writing this function took far less time, and I was able to find the functions I needed
to use fairly easily. It was also much smaller; in fact, it had only 5 lines:

#+BEGIN_SRC elisp
  (defun copy-buffer ()
	"Copy the complete buffer to the system clipboard"
	(interactive)
	(kill-new (filter-buffer-substring (point-min) (point-max)))
	nil)
#+END_SRC

My main problem here was the terminology. The Emacs terminology for everything is _different_:

- ~yank~ – paste
- ~kill~ – cut, that is, delete and copy to the kill ring

What I wanted to do was _copy_, I could find anything close to this in the [[https://www.emacswiki.org/emacs/Glossary][Emacs glossary]]. After
reading some more, I realized that the ~kill-ring~ was similar to the clipboard and pushing things
onto that ring is the same as copying something. And that is how I reached this function
~kill-new~. This function pushes it's first argument to the ring => essentially copying that string.
